datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Users of the application
model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  sessions   Session[]
  accounts   Account[]
  pdfRecords PdfRecord[]
}

// Records of PDFs generated by users
model PdfRecord {
  id        String   @id @default(cuid())
  url       String
  path      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

// Linked OAuth accounts for users
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  refresh_token String?   @map("refresh_token")
  access_token  String?   @map("access_token")
  expires_at    Int?      @map("expires_at")
  token_type    String?   @map("token_type")
  scope         String?
  id_token      String?   @map("id_token")
  session_state String?   @map("session_state")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Session data for persistent login
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Tokens used by NextAuthâ€™s Email provider
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}
